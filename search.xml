<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java对象复制</title>
    <url>/2022/12/19/java%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>在我们实际项目开发过程中，我们经常需要将不同的两个对象实例进行属性复制，从而基于源对象的属性信息进行后续操作，而不改变源对象的属性信息。比如DTO数据传输对象和数据对象DO，我们需要将DO对象进行属性复制到DTO，但是对象格式又不一样，所以我们需要编写映射代码将对象中的属性值从一种类型转换成另一种类型。</p>
<p>这种转换最原始的方式就是手动编写大量的get&#x2F;set代码，属性少的时候还好，属性多的时候就非常繁琐了，一个合格的程序员显然不会仅仅局限于get&#x2F;set。</p>
<p>针对这个问题，市场上诞生了很多方便的类库，用于对象拷贝。常用的有apache BeanUtils、spring BeanUtils、Dozer、Orika等拷贝工具。</p>
<p>何不可变类<br>当类的实例一经创建，其内容便不可改变，即无法修改其成员变量。</p>
<p>Java中有一些特殊的类是不可变类，八个基本类型的包装类和String类都属于不可变类。</p>
<p>不可变类的特殊性：<br>有两个不可变类对象，当两个对象指向同一引用时，修改某一对象的值，不会对另一个对象造成影响。</p>
<p>下面举例说明</p>
<p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> aa;</span><br><span class="line">    System.out.println(<span class="string">&quot;a修改前b:&quot;</span>+b);</span><br><span class="line">    System.out.println(<span class="string">&quot;aa修改前bb:&quot;</span>+bb);</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    aa = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;a修改后b:&quot;</span>+b);</span><br><span class="line">    System.out.println(<span class="string">&quot;aa修改后bb:&quot;</span>+bb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>debug：</p>
<p>日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a修改前b:1</span><br><span class="line">aa修改前bb:1</span><br><span class="line">a修改后b:1</span><br><span class="line">aa修改后bb:1</span><br></pre></td></tr></table></figure>


<p>由此可见，a和aa的修改不会影响b和bb的值。</p>
<p>方法参数的传递：</p>
<p>基本类型传递的是值；<br>引用类型传递的是对象的引用。<br>不可变类型，在方法里修改了对象的值，也不会影响到原对象（不可变性）；<br>可变类型，在方法里修改了对象的值，原对象相应的值也会变动。<br>对象复制方式<br>对象复制有三种方式：直接赋值、浅拷贝、深拷贝。</p>
<p>1.直接赋值<br>基本数据类型复制的是值；<br>引用数据类型复制的是对象的引用，原始对象及目标对象引用的是同一个对象。<br>2.浅拷贝<br>创建一个新对象，然后将当前对象的非静态字段复制到该新对象。</p>
<p>基本数据类型复制的是值；<br>引用数据类型复制的是对象的引用（不可变类型特殊）。<br>注意：String类型、Integer等基本数据类型的包装类型，因为时不可变类型，所以即使进行的是浅拷贝，原始对象的改变并不会影响目标对象。</p>
<p>3.深拷贝<br>创建一个新对象，然后将当前对象的非静态字段复制到该新对象。</p>
<p>无论该字段是基本类型的还是引用类型，都复制独立的一份。当你修改其中一个对象的任何内容时，都不会影响另一个对象的内容。<br>对象复制方案<br>一个好用的属性复制方案，需要有哪些特性：</p>
<p>支持基本的属性复制；<br>支持不同类型的属性赋值，比如基本类型与其包装类型等；<br>支持不同字段名的属性赋值，当然字段名应该尽量保持一致，但是实际业务中，确实会有字段名不一致的情况；<br>浅拷贝&#x2F;深拷贝，浅拷贝会引用同一对象，如果稍微不慎，同时改动对象，就会踩到意想不到的坑。<br>市场上的对象转换方案主要分类：</p>
<p>直接编写get、set代码（硬编码）；<br>通过反射实现；<br>编译期生成get、set代码；<br>基于AOP、ASM、CGlib等技术实现。<br>12种对象转换方案归纳：</p>
<p>方案	推荐指数	性能指数	原理	点评<br>get&#x2F;set	★★★☆☆	★★★★★	手写get、set	日常使用最多，性能好，只是较麻烦，需要手写。<br>Spring BeanUtils	★★★☆☆	★★★★☆	基于反射	日常使用较多，性能较好，推荐使用<br>Apache BeanUtils	☆☆☆☆☆	★☆☆☆☆	基于反射	兼容性较差，性能差，不推荐使用<br>BeanCopier	★★★☆☆	★★★★☆	基于CGlib	性能较好，使用也不复杂，可以使用<br>Orika	★★☆☆☆	★★★☆☆	基于Javasisst字节码增强	性能不太突出<br>Dozer	★☆☆☆☆	★★☆☆☆	基于反射的属性映射（递归映射）	性能较差，不太推荐使用<br>MapStruct	★★★★★	★★★★★	编译期生成get、set	性能好，结合到框架中使用方便，推荐使用<br>Bean Mapping	★★☆☆☆	★★★☆☆	基于反射	性能一般，不太推荐使用<br>Bean Mapping ASM	★★★☆☆	★★★★☆	基于ASM字节码增强	性能较好，但暂时不够灵活，可以使用<br>ModelMapper	★★★☆☆	★★★☆☆	基于反射	性能一般，不太推荐使用<br>JMapper	★★★★☆	★★★★★	映射器方式实现	性能较好，使用略微麻烦，可以使用<br>Json2Json	☆☆☆☆☆	★☆☆☆☆	基于JSON序列化和反序列化	野路子，性能较差，不推荐使用<br>分别测试这12种属性转换操作分别在一百次、一千次、一万次、十万次、一百万次时候的性能时间对比。</p>
<p>BeanUtils.copyProperties是大家代码里最常出现的工具类，但只要你不把它用错成Apache包下的，而是使用Spring提供的，就基本还不会对性能造成多大影响。<br>但如果说性能更好，可替代手动get、set的，还是MapStruct更好用，因为它本身就是在编译期生成get、set代码，和我们写get、set一样。<br>其他一些组件包主要基于AOP、ASM、CGlib等技术手段实现的，所以也会有相应的性能损耗。<br>1.get&#x2F;set<br>直接手写get&#x2F;set方法实现数据的复制。</p>
<p>这种方式也是日常使用的最多的，性能较好，就是操作起来有点麻烦。尤其是当对象属性较多的时候。</p>
<p>减少手写代码的方式：</p>
<p>通过一些快捷的操作方式，比如你可以通过 Shift+Alt 选中所有属性，Shift+Tab 归并到一列，接下来在使用 Alt 选中这一列，批量操作粘贴 userDTO.set 以及快捷键大写属性首字母，最后切换到结尾补充括号和分号，最终格式化一下就搞定了。<br>通过IDEA的插件，如GenerateAllSetter插件。光标移至需生成get&#x2F;set方法的对象名称，alt+enter出现快捷选项，选择需要生成的选项，自动生成相应的代码。</p>
<p>2.Spring BeanUtils<br>同样是基于反射的属性拷贝（Introspector机制获取到类的属性来进行赋值操作）。Spring 提供的copyProperties要比Apache好用得多，这也是大家用得比较多的一种复制方式。</p>
<p>Spring BeanUtils的实现方式非常简单，就是对两个对象中相同名字的属性进行简单的get&#x2F;set，仅检查属性的可访问性。成员变量赋值是基于目标对象的成员列表，并且会跳过ignoreProperties的以及在源对象中不存在，不会因为两个对象之间的结构差异导致错误，但是必须保证同名的两个成员变量类型相同。</p>
<p>Introspector：<br>是一个专门处理bean的工具类，用来获取Bean体系里的propertiesDescriptor、methodDescriptor利用反射获取Method信息，是反射的上层。只进行一次反射解析，通过WeakReference静态类级别缓存Method，在jvm不够时会被回收。</p>
<p>特点：</p>
<p>字段名不一致，属性无法复制；<br>类型不一致，属性无法复制。但是注意，如果类型为基本类型以及基本类型的包装类，这种可以转化；<br>浅拷贝。<br>依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.8.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"></span><br><span class="line"> * source：源对象</span><br><span class="line"> * target：目标对象</span><br><span class="line"> * editable：目标对象类的Class对象（需复制的属性基于该Class，当该值为null时需复制的属性基于目标对象的Class）</span><br><span class="line"> * ignoreProperties：需忽略的属性列表</span><br><span class="line">   */</span><br><span class="line">    BeanUtils.copyProperties(Object source, Object target)</span><br><span class="line"></span><br><span class="line">BeanUtils.copyProperties(Object source, Object target, Class&lt;?&gt; editable)</span><br><span class="line"></span><br><span class="line">BeanUtils.copyProperties(Object source, Object target, String... ignoreProperties)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现：</p>
<pre><code>public static void main(String[] args) &#123;
    UserDTO userDTO = new UserDTO();
    userDTO.setId(1);
    userDTO.setUserName(&quot;哈哈&quot;);
    userDTO.setCreateTime(new Date());
UserVO userVO = new UserVO();
BeanUtils.copyProperties(userDTO, userVO);
System.out.println(JSON.toJSONString(userVO));
</code></pre>
<p>}</p>
<p>3.Apache BeanUtils<br>推荐：☆☆☆☆☆<br>性能：★☆☆☆☆<br>手段：Introspector机制获取到类的属性来进行赋值操作<br>点评：兼容性交差，效率较低，不建议使用</p>
<p>Apache BeanUtils使用起来很方便，不过其底层源码为了追求完美，加了过多的包装，使用了很多反射，做了很多校验，做了类型的转换，甚至还会检验对象所属的类的可访问性，可谓相当复杂，过度的追求完美反而导致兼容性变差，也导致了性能较低，所以阿里巴巴开发手册上强制避免使用Apache BeanUtils。</p>
<p>特点：</p>
<p>字段名不一致的属性无法被复制；<br>类型不一致的字段，将会进行默认类型转化；<br>浅拷贝。<br>依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.9.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<p>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**](/**)</span><br><span class="line"></span><br><span class="line"> * dest：目标对象</span><br><span class="line"> * orig：源对象</span><br><span class="line">   */</span><br><span class="line">    BeanUtils.copyProperties(Object dest, Object orig)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p> 实现：</p>
<p> 实现：</p>
<pre><code>public static void main(String[] args) throws InvocationTargetException, IllegalAccessException &#123;
    UserDTO userDTO = new UserDTO();
    userDTO.setId(1);
    userDTO.setUserName(&quot;哈哈&quot;);
    userDTO.setCreateTime(new Date());
UserVO userVO = new UserVO();
BeanUtils.copyProperties(userVO, userDTO);
System.out.println(JSON.toJSONString(userVO));
&#125;
</code></pre>
<p>4.BeanCopier<br>Cglib BeanCopier的原理与上面两个Beanutils原理不太一样，其主要使用CGlib字节码技术动态生成一个代理类，代理类实现get和set方法。生成代理类过程存在一定开销，但是一旦生成，我们可以缓存起来重复使用，所有Cglib性能相比以上两种Beanutils性能比较好。</p>
<p>特点：</p>
<p>字段名不一致，属性无法复制<br>类型不一致，属性无法复制。如果类型为基本类型&#x2F;基本类型的包装类型，这两者也无法被拷贝。但可自定义转换器实现不同类型的拷贝。<br>浅拷贝<br>依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<p>方法：</p>
<ul>
<li><pre><code> /**
</code></pre>
</li>
<li><p>source   源Class</p>
</li>
<li><p>target   目Class</p>
</li>
<li><p>useConverter 是否使用转换器</p>
</li>
<li><p>from 源对象</p>
</li>
<li><p>to   目标对象</p>
</li>
<li><p>converter    转换器<br>*&#x2F;<br> BeanCopier beanCopier &#x3D; BeanCopier.create(Class source, Class target, boolean useConverter);<br> beanCopier.copy(Object from, Object to, Converter converter);</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  实现：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    UserDTO userDTO = new UserDTO();</span><br><span class="line">    userDTO.setId(1);</span><br><span class="line">    userDTO.setUserName(&quot;哈哈&quot;);</span><br><span class="line">    userDTO.setCreateTime(new Date());</span><br><span class="line"></span><br><span class="line">UserVO userVO = new UserVO();</span><br><span class="line">BeanCopier beanCopier = BeanCopier.create(UserDTO.class, UserVO.class, false);</span><br><span class="line">beanCopier.copy(userDTO, userVO, null);</span><br><span class="line">System.out.println(JSON.toJSONString(userVO));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>5.Orika<br>Orika也是一个跟Dozer类似的重量级属性复制工具类，也提供诸如Dozer类似的功能。但是Orika无需使用繁琐 XML配置，它自身提供一套非常简洁的 API 用法，非常容易上手。</p>
<p>Orika底层基于Javassist生成字段属性的映射的字节码，然后直接动态加载执行字节码文件，相比于Dozer的这种使用反射原来的工具类，速度上会快很多。Orika的整个流程其实是需要使用到Java的反射的，只是在真正拷贝的属性的时候没有使用反射。</p>
<p>Orika的执行流程：</p>
<p>先通过内省(反射)把JavaBean的属性(getset方法等)解析出来；<br>进而匹配目标和源的属性；<br>接着根据这些属性和目标&#x2F;源的匹配情况基于Javasisst生成一个 GeneratedMapper的代理对象(真正的执行复制的对象)并放到缓存中；<br>接着就基于这个对象的 mapAtoB和mapBtoA方法对属性进行复制。<br>Orikade的使用需要创建两个对象MapperFactory与MapperFacade，其中MapperFactory 可以用于字段映射，配置转换器等，而MapperFacade 的作用就与Beanutils一样，用于负责对象的之间的映射。</p>
<p>java对象复制克隆<br>zip</p>
<p>3星<br>超过45%的资源<br>2KB</p>
<p>下载<br>特点：</p>
<p>默认支持类型不一致(基本类型&#x2F;包装类型)转换<br>指定不同字段名映射关系，属性可以被成功复制<br>深拷贝<br>依赖：</p>
<dependency>
    <groupId>ma.glasnost.orika</groupId>
    <artifactId>orika-core</artifactId>
    <version>1.5.4</version>
</dependency>
1
2
3
4
5
方法：

<p>&#x2F;**</p>
<ul>
<li>sourceObject 源对象</li>
<li>destinationClass 目标Class</li>
<li>targetObject 目标对象<br> *&#x2F;<br> MapperFactory mapperFactory &#x3D; new DefaultMapperFactory.Builder().build();<br> MapperFacade mapper &#x3D; mapperFactory.getMapperFacade();<br> D targetObject &#x3D; mapper.map(S sourceObject, Class<D> destinationClass);<br> 1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 8<br> 实现：</li>
</ul>
<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());</p>
<pre><code>MapperFactory mapperFactory = new DefaultMapperFactory.Builder().build();
MapperFacade mapper = mapperFactory.getMapperFacade();
UserVO userVO = mapper.map(userDTO, UserVO.class);
System.out.println(JSON.toJSONString(userVO));
</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>6.Dozer<br>Dozer相对BeanUtils这类工具类来说，拥有许多高级功能，所以相对来说这是一个重量级工具类。其底层本质上还是使用了反射完成属性的复制（属性映射，递归的方式复制对象），所以执行速度并不是那么理想。</p>
<p>Dozer需要我们新建一个DozerBeanMapper，这个类作用等同与BeanUtils，负责对象之间的映射，属性复制。<br>生成DozerBeanMapper实例需要加载配置文件，随意生成代价比较高。因此在我们应用程序中，应该尽量使用单例模式，重复使用DozerBeanMapper。</p>
<p>另外，强大的配置功能，我们可以通过XML、API或注解的方式配置源对象和目标对象属性映射关系和类型转换。</p>
<p>特点：</p>
<p>类型不一致的字段，属性被复制<br>通过配置字段名的映射关系，不一样字段的属性也被复制<br>深拷贝<br>依赖：</p>
<dependency>
  <groupId>net.sf.dozer</groupId>
  <artifactId>dozer</artifactId>
  <version>5.4.0</version>
</dependency>
1
2
3
4
5
方法：

<p>&#x2F;**</p>
<ul>
<li>source   源对象</li>
<li>destinationClass 目标Class</li>
<li>target   目标对象<br> *&#x2F;<br> DozerBeanMapper mapper &#x3D; new DozerBeanMapper();<br> T target &#x3D; mapper.map(Object source, Class<T> destinationClass);<br> 1<br> 2<br> 3<br> 4<br> 5<br> 6<br> 7<br> 实现：</li>
</ul>
<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    DozerBeanMapper mapper &#x3D; new DozerBeanMapper();<br>    UserVO userVO &#x3D; mapper.map(userDTO, UserVO.class);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>7.MapStruct<br>MapStruct运行速度与硬编码差不多，这是因为他在编译期间就生成了Java Bean属性复制的代码（属性对应的get、set），运行期间就无需使用反射或者字节码技术，所以确保了高性能。</p>
<p>与硬编码方式相比，不管使用反射，还是使用字节码技术，这些都需要在代码运行期间动态执行所以它们的执行速度都会比硬编码慢很多。</p>
<p>特点：</p>
<p>名不一致，默认不支持复制<br>类型不一致，默认不支持复制（但支持基本类型与包装类型、基本类型的包装类型与String的自动转换）<br>可通注解配置实现名称不一致、类型不一致的复制<br>是深拷贝<br>依赖：</p>
<dependency>
    <groupId>org.mapstruct</groupId>
    <artifactId>mapstruct</artifactId>
    <version>1.3.1.Final</version>
</dependency>
1
2
3
4
5
插件：
由于MapStruct需要在编译器期间生成代码，所以我们需要maven-compiler-plugin插件中配置。

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.8.1</version>
    <configuration>
        <source>1.8</source> <!-- depending on your project -->
        <target>1.8</target> <!-- depending on your project -->
        <annotationProcessorPaths>
            <path>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct-processor</artifactId>
                <version>1.3.1.Final</version>
            </path>
            <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.12</version>
            </path>
            <!-- other annotation processors -->
        </annotationProcessorPaths>
    </configuration>
</plugin>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
方法：

<p>@Mapper<br>public interface UserMapper {</p>
<pre><code>UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);

@Mappings(&#123;
        @Mapping(source = &quot;id&quot;, target = &quot;id&quot;),
        @Mapping(source = &quot;createTime&quot;, target = &quot;createTime&quot;)
&#125;)
UserVO dtoToVo(UserDTO userDTO);
</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>编译：<br>MapStruct没有想象中的神奇，其实就是在编译期生成了接口的实现类，里面的转换方法实现了转换功能。相当于帮我们手写get&#x2F;set设值，所以它的性能会很好。</p>
<p>public class UserMapperImpl implements UserMapper {<br>    public UserMapperImpl() {<br>    }</p>
<pre><code>public UserVO dtoToVo(UserDTO userDTO) &#123;
    if (userDTO == null) &#123;
        return null;
    &#125; else &#123;
        UserVO userVO = new UserVO();
        userVO.setIdd(userDTO.getId());
        userVO.setCreateTime(userDTO.getCreateTime());
        userVO.setUserName(userDTO.getUserName());
        return userVO;
    &#125;
&#125;
</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>实现：</p>
<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    UserVO userVO &#x3D; UserMapper.INSTANCE.dtoToVo(userDTO);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>可能出现的问题：</p>
<p>如果我们对象使用 Lombok 的话，使用 @Mapping指定不同字段名，编译期间可能会抛出如下的错误</p>
<p>原因主要是因为Lombok也需要编译期间自动生成代码，这就可能导致两者冲突，当MapStruct生成代码时，还不存在Lombok生成的代码。解决办法可以在 maven-compiler-plugin插件配置中加入Lombok。</p>
<p>8.Bean Mapping<br>基于反射的属性拷贝。0.0.2版本引入了@BeanMapping，通过@BeanMapping注解可实现灵活的复制方式。</p>
<p>注解定义在 bean-mapping-api 模块中，bean-mapping-core 会默认引入此模块。</p>
<p>特点：</p>
<p>java不同对象及集合的多次复制<br>zip</p>
<p>0星<br>超过10%的资源<br>6KB</p>
<p>下载<br>名不一致，不支持复制<br>类型不一致，不支持复制（但支持基本类型转为包装类型，反过来不支持）<br>通过@BeanMapping注解来灵活控制复制，支持名称不一致的复制、类型不一致的复制和控制是否复制。<br>浅拷贝<br>依赖：</p>
<dependency>
    <groupId>com.github.houbb</groupId>
    <artifactId>bean-mapping-core</artifactId>
    <version>0.2.5</version>
</dependency>
1
2
3
4
5
注解：

<p>@Inherited<br>@Documented<br>@Target(ElementType.FIELD)<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface BeanMapping {</p>
<pre><code>/**
 * 字段别名
 * 如果不填，则默认使用字段的名称
 * 会将source的属性值赋值给target和当前name属性一致的属性
 * @return 字段别名
 */
String name() default &quot;&quot;;

/**
 * 生效条件（默认为生效）
 * 1.当放在source字段上时，表示是否将值赋给target字段
 * 2.当放在target字段上时，表示是否接受赋值。
 * 3.source+target只有同时生效时，才会发生赋值。
 * @return 具体的生效实现
 */
Class&lt;? extends ICondition&gt; condition() default ICondition.class;

/**
 * 类型转换（默认不进行转换）
 * 当source的值转换后可以设置给target，才会将source转换后的值赋值给target对应属性，其他情况不会对值产生影响。
 * @return 具体的转换实现
 */
Class&lt;? extends IConvert&gt; convert() default IConvert.class;
</code></pre>
<p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>方法：</p>
<p>&#x2F;**</p>
<ul>
<li>source   源对象</li>
<li>target   目标对象<br> *&#x2F;<br> BeanUtil.copyProperties(Object source, Object target)<br> 1<br> 2<br> 3<br> 4<br> 5<br> 实现：</li>
</ul>
<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    UserVO userVO &#x3D; new UserVO();<br>    BeanUtil.copyProperties(userDTO, userVO);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>9.Bean Mapping ASM<br>推荐：★★★☆☆<br>性能：★★★★☆<br>手段：基于ASM字节码框架实现<br>点评：与普通的Bean Mapping 相比，性能有所提升，可以使用。</p>
<p>Bean Mapping基于ASM的字节码增强技术的复制方式要比Bean Mapping普通的方式新能要提升不少，但有个缺点就是暂不支持@BeanMapping注解等更加丰富的功能。</p>
<p>特点：</p>
<p>名不一致，不支持复制<br>类型不一致，不支持复制（但支持基本类型转为包装类型，反过来不支持）<br>效率比传统的Bean Mapping要好些，但暂不支持@BeanMapping注解的灵活复制<br>浅拷贝<br>依赖：</p>
<dependency>
    <groupId>com.github.houbb</groupId>
    <artifactId>bean-mapping-asm</artifactId>
    <version>0.2.5</version>
</dependency>
1
2
3
4
5
方法：

<p>&#x2F;**</p>
<ul>
<li>source   源对象</li>
<li>target   目标对象<br> *&#x2F;<br> AsmBeanUtil.copyProperties(Object source, Object target)<br> 1<br> 2<br> 3<br> 4<br> 5<br> 实现：</li>
</ul>
<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    UserVO userVO &#x3D; new UserVO();<br>    AsmBeanUtil.copyProperties(userDTO, userVO);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10.ModelMapper<br>ModelMapper是利用反射的原理实现的。转换对象数量较少时性能不错，如果同时大批量转换对象，性能有所下降。</p>
<p>依赖：</p>
<dependency>
    <groupId>org.modelmapper</groupId>
    <artifactId>modelmapper</artifactId>
    <version>2.3.0</version>
</dependency>
1
2
3
4
5
实现：
简单使用

<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    UserVO userVO &#x3D; new UserVO();<br>    ModelMapper modelMapper &#x3D; new ModelMapper();<br>    modelMapper.map(userDTO, userVO);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>ModelMapper的具体使用可参考文章：实体映射类库（modelmapper和MapStruct）</p>
<p>11.JMapper<br>JMapper通过映射器方式实现。</p>
<p>依赖：</p>
<dependency>
    <groupId>com.googlecode.jmapper-framework</groupId>
    <artifactId>jmapper-core</artifactId>
    <version>1.6.0</version>
</dependency>
1
2
3
4
5
实现：

<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    JMapper&lt;UserVO, UserDTO&gt; jMapper &#x3D; new JMapper&lt;&gt;(UserVO.class, UserDTO.class, new JMapperAPI()<br>            .add(JMapperAPI.mappedClass(UserVO.class)<br>                    .add(JMapperAPI.attribute(“id”).value(“id”))<br>                    .add(JMapperAPI.attribute(“userName”).value(“userName”))<br>                    .add(JMapperAPI.attribute(“createTime”).value(“createTime”))<br>            ));<br>    UserVO userVO &#x3D; jMapper.getDestination(userDTO);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>12.Json2Json<br>这种通过JSON序列化和反序列化的方式，把源对象转为JSON串，再把JSON串转为目标对象，虽然也能达到复制的目的，但不推荐使用。</p>
<p>实现：</p>
<p>public static void main(String[] args) {<br>    UserDTO userDTO &#x3D; new UserDTO();<br>    userDTO.setId(1);<br>    userDTO.setUserName(“哈哈”);<br>    userDTO.setCreateTime(new Date());<br>    UserVO userVO &#x3D; JSON.parseObject(JSON.toJSONString(userDTO), UserVO.class);<br>    System.out.println(JSON.toJSONString(userVO));<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>复制方案选择<br>手写get&#x2F;set肯定是效率最高的；<br>不要使用Apache Beanutils，因为效率低，阿里巴巴规范都直接禁止使用；<br>一般情况使用Spring Beanutils就可以了，效率OK，且本来就是Spring中的东西，不用依赖其它包。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2022/12/19/test-my-site/</url>
    <content><![CDATA[<h1 id="这是一段测试文本"><a href="#这是一段测试文本" class="headerlink" title="这是一段测试文本"></a>这是一段测试文本</h1><p>在文章中插入引言，可包含作者、来源和标题。</p>
<p><strong>别号：</strong> quote</p>
<blockquote><p>content</p>
<footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote>

<p><strong>没有提供参数，则只输出普通的 blockquote</strong></p>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>

<p><strong>引用书上的句子</strong></p>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<p><strong>引用 Twitter</strong></p>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>



<p><strong>引用网络上的文章</strong></p>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote>

<h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>在文章中嵌入 Gist。</p>
<script src="//gist.github.com/gist_id.js?file=[filename]"></script>]]></content>
      <categories>
        <category>Diary</category>
        <category>PlayStation</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>AtomicInteger源码分析</title>
    <url>/2022/12/19/AtomicInteger%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="深入学习java源码之AtomicInteger-get-与AtomicInteger-incrementAndGet"><a href="#深入学习java源码之AtomicInteger-get-与AtomicInteger-incrementAndGet" class="headerlink" title="深入学习java源码之AtomicInteger.get()与AtomicInteger.incrementAndGet()"></a>深入学习java源码之AtomicInteger.get()与AtomicInteger.incrementAndGet()</h3><p>为什么需要AtomicInteger原子操作类？</p>
<p>对于Java中的运算操作，例如自增或自减，若没有进行额外的同步操作，在多线程环境下就是线程不安全的。num++解析为num&#x3D;num+1，明显，这个操作不具备原子性，多线程并发共享这个变量时必然会出现问题。</p>
<p>public class AtomicIntegerTest {</p>
<pre><code>private static final int THREADS_CONUT = 20;
public static int count = 0;
 
public static void increase() &#123;
    count++;
&#125;
 
public static void main(String[] args) &#123;
    Thread[] threads = new Thread[THREADS_CONUT];
    for (int i = 0; i &lt; THREADS_CONUT; i++) &#123;
        threads[i] = new Thread(new Runnable() &#123;
            @Override
            public void run() &#123;
                for (int i = 0; i &lt; 1000; i++) &#123;
                    increase();
                &#125;
            &#125;
        &#125;);
        threads[i].start();
    &#125;
 
    while (Thread.activeCount() &gt; 1) &#123;
        Thread.yield();
    &#125;
    System.out.println(count);
&#125;
</code></pre>
<p>}<br>这里运行了20个线程，每个线程对count变量进行1000此自增操作，如果上面这段代码能够正常并发的话，最后的结果应该是20000才对，但实际结果却发现每次运行的结果都不相同，都是一个小于20000的数字。</p>
<p>把上面的代码改造成AtomicInteger原子类型</p>
<p>import java.util.concurrent.atomic.AtomicInteger;</p>
<p>public class AtomicIntegerTest {</p>
<pre><code>private static final int THREADS_CONUT = 20;
public static AtomicInteger count = new AtomicInteger(0);
 
public static void increase() &#123;
    count.incrementAndGet();
&#125;
 
public static void main(String[] args) &#123;
    Thread[] threads = new Thread[THREADS_CONUT];
    for (int i = 0; i &lt; THREADS_CONUT; i++) &#123;
        threads[i] = new Thread(new Runnable() &#123;
            @Override
            public void run() &#123;
                for (int i = 0; i &lt; 1000; i++) &#123;
                    increase();
                &#125;
            &#125;
        &#125;);
        threads[i].start();
    &#125;
 
    while (Thread.activeCount() &gt; 1) &#123;
        Thread.yield();
    &#125;
    System.out.println(count);
&#125;
</code></pre>
<p>}<br>结果每次都输出20000，程序输出了正确的结果，这都归功于AtomicInteger.incrementAndGet()方法的原子性。</p>
<p>多线程</p>
<p>同步：多线程并发访问共享数据时，保证共享数据再同一时刻只被一个或一些线程使用。</p>
<p>我们知道，阻塞同步和非阻塞同步都是实现线程安全的两个保障手段，非阻塞同步对于阻塞同步而言主要解决了阻塞同步中线程阻塞和唤醒带来的性能问题，那什么叫做非阻塞同步呢？在并发环境下，某个线程对共享变量先进行操作，如果没有其他线程争用共享数据那操作就成功；如果存在数据的争用冲突，那就才去补偿措施，比如不断的重试机制，直到成功为止，因为这种乐观的并发策略不需要把线程挂起，也就把这种同步操作称为非阻塞同步（操作和冲突检测具备原子性）。在硬件指令集的发展驱动下，使得 “操作和冲突检测” 这种看起来需要多次操作的行为只需要一条处理器指令便可以完成，这些指令中就包括非常著名的CAS指令（Compare-And-Swap比较并交换）。</p>
<p>incrementAndGet()方法在一个无限循环体内，不断尝试将一个比当前值大1的新值赋给自己，如果失败则说明在执行”获取-设置”操作的时已经被其它线程修改过了，于是便再次进入循环下一次操作，直到成功为止。这个便是AtomicInteger原子性的”诀窍”了，继续进源码看它的compareAndSet方法:</p>
<p>java源码</p>
<p>一个AtomicInteger用于诸如原子增量计数器的应用程序中，不能用作Integer的替代品 。 但是，这个类确实扩展了Number以允许通过处理基于数字类的工具和实用程序的统一访问。</p>
<p>Modifier and Type	Method and Description<br>int	accumulateAndGet(int x, IntBinaryOperator accumulatorFunction)<br>使用将给定函数应用于当前值和给定值的结果原子更新当前值，返回更新后的值。</p>
<p>int	addAndGet(int delta)<br>将给定的值原子地添加到当前值。</p>
<p>boolean	compareAndSet(int expect, int update)<br>如果当前值 &#x3D;&#x3D;为预期值，则将该值原子设置为给定的更新值。</p>
<p>int	decrementAndGet()<br>原子减1当前值。</p>
<p>double	doubleValue()<br>返回此值 AtomicInteger为 double一个宽元转换后。</p>
<p>float	floatValue()<br>返回此值 AtomicInteger为 float一个宽元转换后。</p>
<p>int	get()<br>获取当前值。</p>
<p>int	getAndAccumulate(int x, IntBinaryOperator accumulatorFunction)<br>使用给定函数应用给当前值和给定值的结果原子更新当前值，返回上一个值。</p>
<p>int	getAndAdd(int delta)<br>将给定的值原子地添加到当前值。</p>
<p>int	getAndDecrement()<br>原子减1当前值。</p>
<p>int	getAndIncrement()<br>原子上增加一个当前值。</p>
<p>int	getAndSet(int newValue)<br>将原子设置为给定值并返回旧值。</p>
<p>int	getAndUpdate(IntUnaryOperator updateFunction)<br>用应用给定函数的结果原子更新当前值，返回上一个值。</p>
<p>int	incrementAndGet()<br>原子上增加一个当前值。</p>
<p>int	intValue()<br>将 AtomicInteger的值作为 int 。</p>
<p>void	lazySet(int newValue)<br>最终设定为给定值。</p>
<p>long	longValue()<br>返回此值 AtomicInteger为 long一个宽元转换后。</p>
<p>void	set(int newValue)<br>设置为给定值。</p>
<p>String	toString()<br>返回当前值的String表示形式。</p>
<p>int	updateAndGet(IntUnaryOperator updateFunction)<br>使用给定函数的结果原子更新当前值，返回更新的值。</p>
<p>boolean	weakCompareAndSet(int expect, int update)<br>如果当前值 &#x3D;&#x3D;为预期值，则将值设置为给定更新值。</p>
<p>package java.util.concurrent.atomic;<br>import java.util.function.IntUnaryOperator;<br>import java.util.function.IntBinaryOperator;<br>import sun.misc.Unsafe;</p>
<p>public class AtomicInteger extends Number implements java.io.Serializable {<br>    private static final long serialVersionUID &#x3D; 6214790243416807050L;</p>
<pre><code>// setup to use Unsafe.compareAndSwapInt for updates
private static final Unsafe unsafe = Unsafe.getUnsafe();
private static final long valueOffset;
 
static &#123;
    try &#123;
        valueOffset = unsafe.objectFieldOffset
            (AtomicInteger.class.getDeclaredField(&quot;value&quot;));
    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;
&#125;
 
private volatile int value;
 
public AtomicInteger(int initialValue) &#123;
    value = initialValue;
&#125;
 
public AtomicInteger() &#123;
&#125;
 
public final int get() &#123;
    return value;
&#125;
 
public final void set(int newValue) &#123;
    value = newValue;
&#125;
 
public final void lazySet(int newValue) &#123;
    unsafe.putOrderedInt(this, valueOffset, newValue);
&#125;
 
public final int getAndSet(int newValue) &#123;
    return unsafe.getAndSetInt(this, valueOffset, newValue);
&#125;
 
public final boolean compareAndSet(int expect, int update) &#123;
    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
&#125;
 
public final boolean weakCompareAndSet(int expect, int update) &#123;
    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
&#125;
 
public final int getAndIncrement() &#123;
    return unsafe.getAndAddInt(this, valueOffset, 1);
&#125;
 
public final int getAndDecrement() &#123;
    return unsafe.getAndAddInt(this, valueOffset, -1);
&#125;	

public final int getAndAdd(int delta) &#123;
    return unsafe.getAndAddInt(this, valueOffset, delta);
&#125;	

public final int incrementAndGet() &#123;
    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;
&#125;	

public final int decrementAndGet() &#123;
    return unsafe.getAndAddInt(this, valueOffset, -1) - 1;
&#125;	

public final int addAndGet(int delta) &#123;
    return unsafe.getAndAddInt(this, valueOffset, delta) + delta;
&#125;	

public final int getAndUpdate(IntUnaryOperator updateFunction) &#123;
    int prev, next;
    do &#123;
        prev = get();
        next = updateFunction.applyAsInt(prev);
    &#125; while (!compareAndSet(prev, next));
    return prev;
&#125;	

public final int updateAndGet(IntUnaryOperator updateFunction) &#123;
    int prev, next;
    do &#123;
        prev = get();
        next = updateFunction.applyAsInt(prev);
    &#125; while (!compareAndSet(prev, next));
    return next;
&#125;	

public final int getAndAccumulate(int x,
                                  IntBinaryOperator accumulatorFunction) &#123;
    int prev, next;
    do &#123;
        prev = get();
        next = accumulatorFunction.applyAsInt(prev, x);
    &#125; while (!compareAndSet(prev, next));
    return prev;
&#125;	

public final int accumulateAndGet(int x,
                                  IntBinaryOperator accumulatorFunction) &#123;
    int prev, next;
    do &#123;
        prev = get();
        next = accumulatorFunction.applyAsInt(prev, x);
    &#125; while (!compareAndSet(prev, next));
    return next;
&#125;	

public String toString() &#123;
    return Integer.toString(get());
&#125;

public int intValue() &#123;
    return get();
&#125;	

public long longValue() &#123;
    return (long)get();
&#125;	

public float floatValue() &#123;
    return (float)get();
&#125;	

public double doubleValue() &#123;
    return (double)get();
&#125;
</code></pre>
<p>}	</p>
<p>Modifier and Type	Method and Description<br>byte	byteValue()<br>返回指定号码作为值 byte ，这可能涉及舍入或截断。</p>
<p>abstract double	doubleValue()<br>返回指定数字的值为 double ，可能涉及四舍五入。</p>
<p>abstract float	floatValue()<br>返回指定数字的值为 float ，可能涉及四舍五入。</p>
<p>abstract int	intValue()<br>返回指定号码作为值 int ，这可能涉及舍入或截断。</p>
<p>abstract long	longValue()<br>返回指定数字的值为 long ，可能涉及四舍五入或截断。</p>
<p>short	shortValue()<br>返回指定号码作为值 short ，这可能涉及舍入或截断。</p>
<p>package java.lang;</p>
<p>public abstract class Number implements java.io.Serializable {</p>
<pre><code>public abstract int intValue();
 
public abstract long longValue();
 
public abstract float floatValue();
 
public abstract double doubleValue();
 
public byte byteValue() &#123;
    return (byte)intValue();
&#125;
 
public short shortValue() &#123;
    return (short)intValue();
&#125;

private static final long serialVersionUID = -8742448824652078965L;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
